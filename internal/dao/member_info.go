// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"context"
	"yclw/ygpay/internal/dao/internal"
	"yclw/ygpay/internal/model/do"
	"yclw/ygpay/internal/model/entity"
)

// memberInfoDao is the data access object for the table t_member_info.
// You can define custom methods on it to extend its functionality as needed.
type memberInfoDao struct {
	*internal.MemberInfoDao
}

var (
	// MemberInfo is a globally accessible object for table t_member_info operations.
	MemberInfo = memberInfoDao{internal.NewMemberInfoDao()}
)

// Add your custom methods and functionality below.

// FindByUsername 根据用户名查询用户信息
func (d *memberInfoDao) FindByUsername(ctx context.Context, username string) (memberInfo *entity.MemberInfo, err error) {
	err = d.Ctx(ctx).Where(d.Columns().Username, username).Scan(&memberInfo)
	return
}

// FindIdByUid 根据UID查询用户ID
func (d *memberInfoDao) FindIdByUid(ctx context.Context, uid string) (id int64, err error) {
	model := entity.MemberInfo{}
	err = d.Ctx(ctx).Where(d.Columns().Uid, uid).Scan(&model)
	if err != nil {
		return
	}
	id = model.Id
	return
}

// FindByUid 根据UID查询用户信息
func (d *memberInfoDao) FindByUid(ctx context.Context, uid string) (memberInfo *entity.MemberInfo, err error) {
	model := entity.MemberInfo{}
	err = d.Ctx(ctx).Where(d.Columns().Uid, uid).Scan(&model)
	memberInfo = &model
	return
}

// FindByUserIds 根据用户ID列表查询用户信息
func (d *memberInfoDao) FindByUserIds(ctx context.Context, userIds []int64) (memberInfos []*entity.MemberInfo, err error) {
	err = d.Ctx(ctx).WhereIn(d.Columns().Id, userIds).Scan(&memberInfos)
	return
}

// FindAll 获取所有用户信息
func (d *memberInfoDao) FindAll(ctx context.Context) (memberInfos []*entity.MemberInfo, err error) {
	err = d.Ctx(ctx).Scan(&memberInfos)
	return
}

// Create 创建用户
func (d *memberInfoDao) Create(ctx context.Context, member *do.MemberInfo) (id int64, err error) {
	cols := d.Columns()
	res, err := d.Ctx(ctx).Fields(
		cols.Uid,
		cols.PasswordHash,
		cols.Username,
		cols.Nickname,
		cols.Avatar,
		cols.Sex,
		cols.Email,
		cols.Mobile,
		cols.Address,
		cols.Remark,
		cols.Sort,
		cols.Status,
	).Data(member).Insert()
	if err != nil {
		return
	}
	id, err = res.LastInsertId()
	return
}

// Update 更新用户
func (d *memberInfoDao) Update(ctx context.Context, member *do.MemberInfo) (err error) {
	cols := d.Columns()
	_, err = d.Ctx(ctx).Fields(
		cols.Username,
		cols.Nickname,
		cols.PasswordHash,
		cols.Avatar,
		cols.Sex,
		cols.Email,
		cols.Mobile,
		cols.Address,
		cols.Remark,
		cols.Sort,
		cols.Status,
	).Data(member).OmitNil().Where(cols.Uid, member.Uid).Update()
	if err != nil {
		return
	}
	return
}

// FindWithPageAndOptions 带筛选条件的分页查询
func (d *memberInfoDao) FindWithPageAndOptions(ctx context.Context, page, pageSize int, options ...QueryOption) (res []*entity.MemberInfo, total int, err error) {
	// 基础查询模型
	model := d.Ctx(ctx)

	// 应用筛选选项
	model = applyOptions(model, options...)

	// 获取总数
	total, err = model.Count()
	if err != nil {
		return
	}

	// 默认排序 + 分页查询
	err = model.Page(page, pageSize).Scan(&res)
	return
}

// Delete 删除用户
func (d *memberInfoDao) DeleteByUid(ctx context.Context, uid string) (err error) {
	_, err = d.Ctx(ctx).Where(d.Columns().Uid, uid).Delete()
	return
}
