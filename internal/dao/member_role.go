// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"context"
	"yclw/ygpay/internal/dao/internal"
	"yclw/ygpay/internal/model/do"
	"yclw/ygpay/internal/model/entity"
)

// memberRoleDao is the data access object for the table t_member_role.
// You can define custom methods on it to extend its functionality as needed.
type memberRoleDao struct {
	*internal.MemberRoleDao
}

var (
	// MemberRole is a globally accessible object for table t_member_role operations.
	MemberRole = memberRoleDao{internal.NewMemberRoleDao()}
)

// Add your custom methods and functionality below.

// FindRoleIdByMemberId 根据用户ID查询角色ID列表
func (d *memberRoleDao) FindRoleIdByMemberId(ctx context.Context, memberId int64) (roleId int64, err error) {
	value, err := d.Ctx(ctx).Where(d.Columns().MemberId, memberId).Fields(d.Columns().RoleId).Value()
	if err != nil {
		return 0, err
	}
	roleId = value.Int64()
	return
}

// FindByRoleIds 根据角色ID列表查询用户ID列表
func (d *memberRoleDao) FindUserIdsByRoleIds(ctx context.Context, roleIds []int64) (userIds []int64, err error) {
	model := []entity.MemberRole{}
	err = d.Ctx(ctx).WhereIn(d.Columns().RoleId, roleIds).Fields(d.Columns().MemberId).Scan(&model)
	userIds = make([]int64, 0, len(model))
	for _, v := range model {
		userIds = append(userIds, v.MemberId)
	}
	return
}

// UpdateRoleIdByMemberId 更新用户角色
func (d *memberRoleDao) UpdateRoleIdByMemberId(ctx context.Context, do *do.MemberRole) (err error) {
	cols := d.Columns()
	_, err = d.Ctx(ctx).Fields(cols.RoleId).Data(do).OmitEmpty().Where(cols.MemberId, do.MemberId).Update()
	return
}

// Create 创建用户角色关系
func (d *memberRoleDao) Create(ctx context.Context, do *do.MemberRole) (err error) {
	cols := d.Columns()
	_, err = d.Ctx(ctx).Fields(cols.MemberId, cols.RoleId).Data(do).Insert()
	return
}
