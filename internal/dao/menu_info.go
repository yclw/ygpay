// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"context"
	"yclw/ygpay/internal/dao/internal"
	"yclw/ygpay/internal/model/do"
	"yclw/ygpay/internal/model/entity"
)

// menuInfoDao is the data access object for the table t_menu_info.
// You can define custom methods on it to extend its functionality as needed.
type menuInfoDao struct {
	*internal.MenuInfoDao
}

var (
	// MenuInfo is a globally accessible object for table t_menu_info operations.
	MenuInfo = menuInfoDao{internal.NewMenuInfoDao()}
)

// Add your custom methods and functionality below.

// FindByMenuIds 根据菜单ID获取菜单
func (d *menuInfoDao) FindByMenuIds(ctx context.Context, menuIds []int64) (res []*entity.MenuInfo, err error) {
	cols := d.Columns()
	err = d.Ctx(ctx).WhereIn(cols.Id, menuIds).Scan(&res)
	return
}

// FindByID 根据ID获取菜单
func (d *menuInfoDao) FindByID(ctx context.Context, id int64) (res *entity.MenuInfo, err error) {
	cols := d.Columns()
	err = d.Ctx(ctx).Where(cols.Id, id).Scan(&res)
	return
}

// FindAll 获取所有菜单
func (d *menuInfoDao) FindAll(ctx context.Context) (res []*entity.MenuInfo, err error) {
	err = d.Ctx(ctx).Scan(&res)
	return
}

// FindWithPageAndOptions 带筛选条件的分页查询
func (d *menuInfoDao) FindWithPageAndOptions(ctx context.Context, page, pageSize int, options ...QueryOption) (res []*entity.MenuInfo, total int, err error) {

	// 基础查询模型
	model := d.Ctx(ctx)

	// 应用筛选选项
	model = applyOptions(model, options...)

	// 获取总数
	total, err = model.Count()
	if err != nil {
		return
	}

	// 默认排序 + 分页查询
	err = model.Page(page, pageSize).Scan(&res)
	return
}

// Create 创建菜单
func (d *menuInfoDao) Create(ctx context.Context, req *do.MenuInfo) (id int64, err error) {
	cols := d.Columns()
	mod, err := d.Ctx(ctx).Fields(
		cols.Type,
		cols.Name,
		cols.Path,
		cols.Title,
		cols.Icon,
		cols.Sort,
		cols.ShowParent,
		cols.ShowLink,
		cols.KeepAlive,
		cols.Redirect,
		cols.Component,
		cols.FrameSrc,
		cols.Url,
		cols.Status,
	).Data(req).OmitNil().Insert()
	if err != nil {
		return
	}
	id, err = mod.LastInsertId()
	return
}

// Update 更新菜单
func (d *menuInfoDao) Update(ctx context.Context, req *do.MenuInfo) (err error) {
	cols := d.Columns()
	_, err = d.Ctx(ctx).Where(cols.Id, req.Id).Fields(
		cols.Type,
		cols.Name,
		cols.Path,
		cols.Title,
		cols.Icon,
		cols.Sort,
		cols.ShowParent,
		cols.ShowLink,
		cols.KeepAlive,
		cols.Redirect,
		cols.Component,
		cols.FrameSrc,
		cols.Url,
		cols.Status,
	).Data(req).OmitNil().Update()
	return
}

// Delete 删除菜单
func (d *menuInfoDao) Delete(ctx context.Context, id int64) (err error) {
	cols := d.Columns()
	_, err = d.Ctx(ctx).Where(cols.Id, id).Delete()
	return
}
